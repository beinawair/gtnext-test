import type { ErrorScope } from "@turnkeyid/utils-ts"
import { BaseError, modelFactory } from "@turnkeyid/utils-ts"
import { ExpressError } from "../errors/express.error"

export const createErrorResponse: typeof ExpressError._factory = input => {
  const errorObject = input[`error`] ?? input
  let error = isErrorResponse(errorObject) ? errorObject : ExpressError._factory({ ...input })

  try {
    Object.assign(error, {
      message: errorObject?.message ?? error.public_message,
    })
  } catch {
    error = ExpressError._factory({
      ...error,
      message: errorObject?.message ?? error.public_message,
    })
  }

  return error
}

class UnauthorizedError extends BaseError {
  protected scope: ErrorScope = `PUBLIC`
  public name = `UNAUTHORIZED`
  public httpStatus = 403
  public message = `unknown error`
  public public_message?: string | undefined = `unauthorized`

  static _factory = modelFactory(UnauthorizedError, {
    allAutoGenerated: true,
  })
}

export const createUnauthorizedResponse = UnauthorizedError._factory
export const isErrorResponse = (unk: unknown): unk is ExpressError => typeof unk === `object` && (unk instanceof ExpressError || unk instanceof Error)
