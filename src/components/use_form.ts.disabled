
type FormFields = Record<string, any>

type Form = [
  Accessor<FormFields>,
  {
    submit: (any) => void;
    updateField: (
      fieldName: string,
      isCheckBox: boolean
    ) => (event: Event) => void;
  },
]

const useForm = <T extends FormFields>(
  request: { onSubmitHandler: (formData: T, e: Event) => void | Promise<void> },
) => {
  const { onSubmitHandler } = request
  // eslint-disable-next-line prefer-object-spread
  const [formData, setFormData] = createStore<T>(Object.assign({}))

  const clearField = (fieldName: string) => {
    setFormData({
      [fieldName]: ``,
    } as any)
  }
  
  let whenUpdateFormField = <K extends keyof T>(formData: T, fieldName: K, currentTarget: HTMLInputElement) => {
    //
  }
  
  const updateFormField = <K extends keyof T>(fieldName: K) => (event: Event, bypassValue?: any) => {
    const inputElement = event?.currentTarget as HTMLInputElement
    if (inputElement?.type === `checkbox`) {
      setFormData({
        [fieldName]: bypassValue ?? !!inputElement.checked,
      } as any)
    } else {
      setFormData({
        [fieldName]: bypassValue ?? inputElement.value,
      } as any)
    }

    whenUpdateFormField(formData, fieldName, inputElement)
  }

  const onUpdatedFormField = (functor: typeof whenUpdateFormField) => {
    whenUpdateFormField = functor
  }

  return {
    setFormData,
    formData,
    onSubmit: (e: Event) => onSubmitHandler(formData, e),
    updateFormField,
    onUpdatedFormField,
    clearField,
  }
}

export { useForm }
export type { Form }
